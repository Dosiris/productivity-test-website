export async function POST(req: Request) {
    try {
        const { messages, profile } = await req.json();

        if (!messages || !Array.isArray(messages)) {
            return new Response(
                JSON.stringify({ error: "Invalid messages format" }),
                { status: 400 }
            );
        }

        // üß† Th√¥ng tin ng∆∞·ªùi d√πng (n·∫øu c√≥)
        const userIntro = profile
            ? `Ng∆∞·ªùi d√πng t√™n l√† ${profile.userName || "b·∫°n"}, c√≥ ki·ªÉu t√≠nh c√°ch ${profile.type?.name || "kh√¥ng r√µ"}.
H√£y ph·∫£n h·ªìi theo phong c√°ch ph√π h·ª£p v·ªõi ki·ªÉu t√≠nh c√°ch n√†y.`
            : "Ng∆∞·ªùi d√πng ch∆∞a cung c·∫•p th√¥ng tin c√° nh√¢n ho·∫∑c k·∫øt qu·∫£ b√†i test.";

        // üåø Prompt linh ho·∫°t ‚Äì kh√¥ng c·ª©ng nh·∫Øc, AI s·∫Ω t·ª± ph√°t hi·ªán v√† h∆∞·ªõng l·∫°i ch·ªß ƒë·ªÅ
        const systemPrompt = `
B·∫°n l√† m·ªôt tr·ª£ l√Ω AI th√¢n thi·ªán, chuy√™n v·ªÅ ch·ªß ƒë·ªÅ "toxic productivity" ‚Äî bao g·ªìm: 
- Nh·∫≠n di·ªán d·∫•u hi·ªáu c·ªßa toxic productivity,
- Nguy√™n nh√¢n,
- H·∫≠u qu·∫£,
- V√† c√°ch v∆∞·ª£t qua.

N·∫øu ng∆∞·ªùi d√πng n√≥i ƒëi·ªÅu kh√¥ng li√™n quan, ƒë·ª´ng t·ª´ ch·ªëi c·ª©ng nh·∫Øc. 
H√£y ph·∫£n h·ªìi t·ª± nhi√™n, kh√©o l√©o h∆∞·ªõng h·ªç quay l·∫°i ch·ªß ƒë·ªÅ toxic productivity. 
V√≠ d·ª•:
- "Hehe, c√¢u n√†y h∆°i l·∫°c ƒë·ªÅ x√≠u üòÖ Nh∆∞ng n·∫øu b·∫°n ƒëang th·∫•y ƒëi·ªÅu ƒë√≥ ·∫£nh h∆∞·ªüng t·ªõi nƒÉng su·∫•t ho·∫∑c √°p l·ª±c c·ªßa b·∫°n, m√¨nh c√≥ th·ªÉ gi√∫p ph√¢n t√≠ch d∆∞·ªõi g√≥c ƒë·ªô toxic productivity nha üåø"
- "C√¢u h·ªèi hay ƒë√≥, nh∆∞ng m√¨nh t·∫≠p trung n√≥i v·ªÅ toxic productivity nhen, b·∫°n c√≥ ƒëang c·∫£m th·∫•y ki·ªát s·ª©c g·∫ßn ƒë√¢y kh√¥ng?"

${userIntro}
`;

        // üöÄ G·ªçi API OpenRouter
        const res = await fetch("https://openrouter.ai/api/v1/chat/completions", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                Authorization: `Bearer ${process.env.OPENROUTER_API_KEY}`,
            },
            body: JSON.stringify({
                model: "openai/gpt-4-turbo",
                messages: [
                    {
                        role: "system",
                        content: systemPrompt,
                    },
                    ...messages.map((m: any) => ({
                        role: m.type === "user" ? "user" : "assistant",
                        content: m.content,
                    })),
                ],
            }),
        });

        const data = await res.json();
        const reply =
            data?.choices?.[0]?.message?.content ||
            "Xin l·ªói, m√¨nh ch∆∞a hi·ªÉu √Ω b·∫°n üòÖ";

        return new Response(JSON.stringify({ response: reply }), {
            status: 200,
            headers: { "Content-Type": "application/json" },
        });
    } catch (error: any) {
        console.error("‚ùå OpenRouter API error:", error);
        return new Response(
            JSON.stringify({
                error: "L·ªói khi g·ªçi OpenRouter API",
                details: error.message,
            }),
            { status: 500, headers: { "Content-Type": "application/json" } }
        );
    }
}

export async function OPTIONS() {
    return new Response(null, {
        status: 204,
        headers: {
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Methods": "POST, OPTIONS",
            "Access-Control-Allow-Headers": "Content-Type, Authorization",
        },
    });
}
