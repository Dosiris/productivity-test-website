export async function POST(req: Request) {
    try {
        const { messages, profile } = await req.json();

        if (!messages || !Array.isArray(messages)) {
            return new Response(
                JSON.stringify({ error: 'Invalid messages format' }),
                { status: 400 }
            );
        }

        // üß† Gh√©p th√™m th√¥ng tin ng∆∞·ªùi d√πng (n·∫øu c√≥)
        const userIntro = profile
            ? `Ng∆∞·ªùi d√πng t√™n l√† ${profile.userName || 'b·∫°n'}, c√≥ ki·ªÉu t√≠nh c√°ch ${profile.type?.name || 'kh√¥ng r√µ'}.
      H√£y ƒëi·ªÅu ch·ªânh c√°ch ph·∫£n h·ªìi sao cho ph√π h·ª£p v·ªõi ki·ªÉu t√≠nh c√°ch n√†y.`
            : 'Ng∆∞·ªùi d√πng ch∆∞a cung c·∫•p th√¥ng tin c√° nh√¢n ho·∫∑c k·∫øt qu·∫£ b√†i test.';

        // üß© Prompt g·ªëc ƒë∆∞·ª£c gi·ªØ nguy√™n ‚Äî ch·ªâ ch√®n userIntro v√†o
        const systemPrompt = `
B·∫°n l√† m·ªôt tr·ª£ l√Ω AI ch·ªâ th·∫£o lu·∫≠n v·ªÅ ch·ªß ƒë·ªÅ "toxic productivity" ‚Äî bao g·ªìm: nh·∫≠n di·ªán, nguy√™n nh√¢n, h·∫≠u qu·∫£, v√† c√°ch v∆∞·ª£t qua t√¨nh tr·∫°ng n√†y.
N·∫øu ng∆∞·ªùi d√πng h·ªèi v·ªÅ ch·ªß ƒë·ªÅ kh√°c (nh∆∞ c√¥ng ngh·ªá, h·ªçc t·∫≠p, tin t·ª©c, hay l·∫≠p tr√¨nh), b·∫°n KH√îNG tr·∫£ l·ªùi, m√† ch·ªâ nh·∫Øc h·ªç quay l·∫°i ƒë√∫ng ch·ªß ƒë·ªÅ.
V√≠ d·ª•: "M√¨nh ch·ªâ c√≥ th·ªÉ n√≥i v·ªÅ toxic productivity th√¥i nha üåø B·∫°n c√≥ mu·ªën m√¨nh gi√∫p nh·∫≠n di·ªán d·∫•u hi·ªáu c·ªßa n√≥ kh√¥ng?"

${userIntro}
`;

        // üöÄ G·ªçi API OpenRouter
        const res = await fetch('https://openrouter.ai/api/v1/chat/completions', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                Authorization: `Bearer ${process.env.OPENROUTER_API_KEY}`,
            },
            body: JSON.stringify({
                model: 'openai/gpt-4-turbo',
                messages: [
                    {
                        role: 'system',
                        content: systemPrompt,
                    },
                    ...messages.map((m: any) => ({
                        role: m.type === 'user' ? 'user' : 'assistant',
                        content: m.content,
                    })),
                ],
            }),
        });

        const data = await res.json();
        const reply =
            data?.choices?.[0]?.message?.content ||
            'Xin l·ªói, m√¨nh ch∆∞a hi·ªÉu √Ω b·∫°n üòÖ';

        return new Response(JSON.stringify({ response: reply }), {
            status: 200,
            headers: { 'Content-Type': 'application/json' },
        });
    } catch (error: any) {
        console.error('‚ùå OpenRouter API error:', error);
        return new Response(
            JSON.stringify({
                error: 'L·ªói khi g·ªçi OpenRouter API',
                details: error.message,
            }),
            { status: 500, headers: { 'Content-Type': 'application/json' } }
        );
    }
}

export async function OPTIONS() {
    return new Response(null, {
        status: 204,
        headers: {
            'Access-Control-Allow-Origin': '*',
            'Access-Control-Allow-Methods': 'POST, OPTIONS',
            'Access-Control-Allow-Headers': 'Content-Type, Authorization',
        },
    });
}