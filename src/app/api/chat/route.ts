export async function POST(req: Request) {
    try {
        const { messages, profile } = await req.json();

        if (!messages || !Array.isArray(messages)) {
            return new Response(JSON.stringify({ error: 'Invalid messages format' }), { status: 400 });
        }

        // --- Helper: normalize & sanitize name ---
        const normalizeName = (raw?: any) => {
            if (!raw) return '';
            // stringify, trim
            let s = String(raw).trim();

            // Replace multiple spaces with single
            s = s.replace(/\s+/g, ' ');

            // Keep letters (including Vietnamese range), spaces, dashes/apostrophe optional
            // Remove punctuation and digits
            s = s.replace(/[^a-zA-Z√Ä-·ªπ√†-·ªπ∆†∆°∆Ø∆∞·∫†-·ªπ·∫°-·ªπ\s'-]/g, '');

            // Cut to reasonable length (e.g., 24 chars)
            if (s.length > 24) s = s.slice(0, 24).trim();

            return s;
        };

        // --- Simple profanity blacklist (demo) ---
        // Expand this list with real words you want to block/replace.
        const PROFANITY = [
            'm·∫π ki·∫øp', 'm·ªãa', 'ƒë·ªãt', 'ƒë√©o', 'ƒë√©o', 'fuck', 'shit', 'ngu', 'ƒë·ªì ngu' // add more as needed
        ].map(w => w.toLowerCase());

        const containsProfanity = (name: string) => {
            const lower = name.toLowerCase();
            return PROFANITY.some(b => {
                // exact word or substring match (you can improve with word boundaries)
                return lower.includes(b);
            });
        };

        // Clean name from profile (try profile.userName first, fallback profile.name)
        const rawName = profile?.userName ?? profile?.name ?? '';
        const cleaned = normalizeName(rawName);

        const finalName = (cleaned && !containsProfanity(cleaned)) ? cleaned : 'b·∫°n';

        // Build userIntro with safe name
        const userIntro = profile
            ? `Ng∆∞·ªùi d√πng t√™n l√† ${finalName}, c√≥ ki·ªÉu t√≠nh c√°ch ${profile.type?.name || 'kh√¥ng r√µ'}.`
            : 'Ng∆∞·ªùi d√πng ch∆∞a cung c·∫•p th√¥ng tin c√° nh√¢n ho·∫∑c k·∫øt qu·∫£ b√†i test.';

        const systemPrompt = `
B·∫°n l√† m·ªôt tr·ª£ l√Ω AI ch·ªâ th·∫£o lu·∫≠n v·ªÅ ch·ªß ƒë·ªÅ "toxic productivity" ‚Äî bao g·ªìm: nh·∫≠n di·ªán, nguy√™n nh√¢n, h·∫≠u qu·∫£, v√† c√°ch v∆∞·ª£t qua t√¨nh tr·∫°ng n√†y.
N·∫øu ng∆∞·ªùi d√πng h·ªèi v·ªÅ ch·ªß ƒë·ªÅ kh√°c (nh∆∞ c√¥ng ngh·ªá, h·ªçc t·∫≠p, tin t·ª©c, hay l·∫≠p tr√¨nh), b·∫°n KH√îNG tr·∫£ l·ªùi, m√† ch·ªâ nh·∫Øc h·ªç quay l·∫°i ƒë√∫ng ch·ªß ƒë·ªÅ.
V√≠ d·ª•: "M√¨nh ch·ªâ c√≥ th·ªÉ n√≥i v·ªÅ toxic productivity th√¥i nha üåø B·∫°n c√≥ mu·ªën m√¨nh gi√∫p nh·∫≠n di·ªán d·∫•u hi·ªáu c·ªßa n√≥ kh√¥ng?"

${userIntro}
    `;

        // Build messages for OpenRouter in expected format
        const outMessages = [
            { role: 'system', content: systemPrompt },
            ...messages.map((m: any) => ({
                role: m.role ?? (m.type === 'user' ? 'user' : 'assistant'),
                content: m.content,
            })),
        ];

        // Call OpenRouter
        const res = await fetch('https://openrouter.ai/api/v1/chat/completions', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                Authorization: `Bearer ${process.env.OPENROUTER_API_KEY}`,
            },
            body: JSON.stringify({
                model: 'openai/gpt-4-turbo',
                messages: outMessages,
            }),
        });

        const data = await res.json();
        const reply = data?.choices?.[0]?.message?.content || 'Xin l·ªói, m√¨nh ch∆∞a hi·ªÉu √Ω b·∫°n üòÖ';

        return new Response(JSON.stringify({ response: reply }), {
            status: 200,
            headers: { 'Content-Type': 'application/json' },
        });
    } catch (error: any) {
        console.error('‚ùå OpenRouter API error:', error);
        return new Response(JSON.stringify({ error: 'L·ªói khi g·ªçi OpenRouter API', details: error.message }), {
            status: 500,
            headers: { 'Content-Type': 'application/json' },
        });
    }
}

export async function OPTIONS() {
    return new Response(null, {
        status: 204,
        headers: {
            'Access-Control-Allow-Origin': '*',
            'Access-Control-Allow-Methods': 'POST, OPTIONS',
            'Access-Control-Allow-Headers': 'Content-Type, Authorization',
        },
    });
}
