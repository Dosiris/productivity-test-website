export interface PersonalityScore {
  busyBee: number;
  chiller: number;
  balancer: number;
  overAchiever: number;
}

export interface PersonalityType {
  id: string;
  name: string;
  vietnameseName: string;
  description: string;
  strengths: string[];
  careerSuggestions: string[];
  tips: string;
  color: string;
  emoji: string;
  image: string;
}

// ƒê·ªãnh nghƒ©a 4 ki·ªÉu t√≠nh c√°ch
export const personalityTypes: Record<string, PersonalityType> = {
  busyBee: {
    id: 'busyBee',
    name: 'Busy Bee',
    vietnameseName: 'Ng∆∞·ªùi B·∫≠n R·ªôn',
    description: 'B·∫°n l√† ng∆∞·ªùi lu√¥n b·∫≠n r·ªôn v√† kh√¥ng ng·ª´ng n·ªó l·ª±c. B·∫°n c√≥ xu h∆∞·ªõng l√†m nhi·ªÅu vi·ªác c√πng l√∫c v√† c·∫£m th·∫•y kh√≥ ch·ªãu khi kh√¥ng c√≥ g√¨ ƒë·ªÉ l√†m.',
    strengths: [
      'NƒÉng ƒë·ªông v√† nhi·ªát huy·∫øt',
      'C√≥ kh·∫£ nƒÉng ƒëa nhi·ªám t·ªët',
      'Lu√¥n s·∫µn s√†ng gi√∫p ƒë·ª° ng∆∞·ªùi kh√°c',
      'C√≥ ƒë·ªông l·ª±c cao'
    ],
    careerSuggestions: [
      'Qu·∫£n l√Ω d·ª± √°n',
      'Event planning',
      'Sales & Marketing',
      'Kh·ªüi nghi·ªáp'
    ],
    tips: 'H√£y h·ªçc c√°ch ∆∞u ti√™n v√† t·∫≠p trung v√†o nh·ªØng vi·ªác quan tr·ªçng nh·∫•t. ƒê·ª´ng qu√™n d√†nh th·ªùi gian ngh·ªâ ng∆°i ƒë·ªÉ tr√°nh ki·ªát s·ª©c.',
    color: '#F59E0B',
    emoji: 'üêù',
    image: '/images/hero/Busy-bee.png'
  },
  chiller: {
    id: 'chiller',
    name: 'The Chiller',
    vietnameseName: 'Ng∆∞·ªùi Th∆∞ Gi√£n',
    description: 'B·∫°n l√† ng∆∞·ªùi bi·∫øt c√°ch c√¢n b·∫±ng gi·ªØa c√¥ng vi·ªác v√† cu·ªôc s·ªëng. B·∫°n ∆∞u ti√™n s·ª©c kh·ªèe tinh th·∫ßn v√† kh√¥ng ƒë·ªÉ c√¥ng vi·ªác chi ph·ªëi ho√†n to√†n.',
    strengths: [
      'Bi·∫øt c√°ch th∆∞ gi√£n',
      'C√¢n b·∫±ng t·ªët gi·ªØa c√¥ng vi·ªác v√† cu·ªôc s·ªëng',
      'Kh√¥ng b·ªã stress qu√° m·ª©c',
      'C√≥ kh·∫£ nƒÉng t·∫≠n h∆∞·ªüng cu·ªôc s·ªëng'
    ],
    careerSuggestions: [
      'Freelancer',
      'Ngh·ªá thu·∫≠t & S√°ng t·∫°o',
      'T∆∞ v·∫•n',
      'Gi√°o d·ª•c'
    ],
    tips: 'H√£y t·∫≠n d·ª•ng kh·∫£ nƒÉng c√¢n b·∫±ng c·ªßa m√¨nh ƒë·ªÉ t·∫°o ra m√¥i tr∆∞·ªùng l√†m vi·ªác t√≠ch c·ª±c cho b·∫£n th√¢n v√† ƒë·ªìng nghi·ªáp.',
    color: '#10B981',
    emoji: 'üßò',
    image: '/images/hero/Chiller.png'
  },
  balancer: {
    id: 'balancer',
    name: 'The Balancer',
    vietnameseName: 'Ng∆∞·ªùi C√¢n B·∫±ng',
    description: 'B·∫°n l√† ng∆∞·ªùi bi·∫øt c√°ch c√¢n b·∫±ng gi·ªØa nƒÉng su·∫•t v√† s·ª©c kh·ªèe. B·∫°n l√†m vi·ªác hi·ªáu qu·∫£ nh∆∞ng c≈©ng bi·∫øt khi n√†o c·∫ßn ngh·ªâ ng∆°i.',
    strengths: [
      'C√¢n b·∫±ng t·ªët gi·ªØa nƒÉng su·∫•t v√† s·ª©c kh·ªèe',
      'C√≥ k·ªπ nƒÉng qu·∫£n l√Ω th·ªùi gian',
      'Bi·∫øt c√°ch ∆∞u ti√™n c√¥ng vi·ªác',
      'C√≥ kh·∫£ nƒÉng th√≠ch ·ª©ng cao'
    ],
    careerSuggestions: [
      'Qu·∫£n l√Ω nh√¢n s·ª±',
      'T∆∞ v·∫•n doanh nghi·ªáp',
      'Ph√°t tri·ªÉn s·∫£n ph·∫©m',
      'ƒê√†o t·∫°o & Ph√°t tri·ªÉn'
    ],
    tips: 'H√£y chia s·∫ª kinh nghi·ªám c√¢n b·∫±ng c·ªßa m√¨nh v·ªõi ƒë·ªìng nghi·ªáp ƒë·ªÉ t·∫°o ra m√¥i tr∆∞·ªùng l√†m vi·ªác l√†nh m·∫°nh h∆°n.',
    color: '#3B82F6',
    emoji: '‚öñÔ∏è',
    image: '/images/hero/Balancer.png'
  },
  overAchiever: {
    id: 'overAchiever',
    name: 'Over Achiever',
    vietnameseName: 'Ng∆∞·ªùi Th√†nh T√≠ch',
    description: 'B·∫°n l√† ng∆∞·ªùi lu√¥n ƒë·∫∑t m·ª•c ti√™u cao v√† kh√¥ng ng·ª´ng ph·∫•n ƒë·∫•u ƒë·ªÉ ƒë·∫°t ƒë∆∞·ª£c ch√∫ng. B·∫°n c√≥ th·ªÉ l√†m vi·ªác qu√° s·ª©c ƒë·ªÉ ƒë·∫°t ƒë∆∞·ª£c k·∫øt qu·∫£ t·ªët nh·∫•t.',
    strengths: [
      'C√≥ m·ª•c ti√™u r√µ r√†ng',
      'L√†m vi·ªác hi·ªáu qu·∫£ cao',
      'Ch·ªãu ƒë∆∞·ª£c √°p l·ª±c',
      'C√≥ ƒë·ªông l·ª±c m·∫°nh m·∫Ω'
    ],
    careerSuggestions: [
      'L√£nh ƒë·∫°o c·∫•p cao',
      'T∆∞ v·∫•n chi·∫øn l∆∞·ª£c',
      'ƒê·∫ßu t∆∞ & T√†i ch√≠nh',
      'Nghi√™n c·ª©u & Ph√°t tri·ªÉn'
    ],
    tips: 'H√£y nh·ªõ r·∫±ng th√†nh c√¥ng kh√¥ng ch·ªâ l√† k·∫øt qu·∫£ cu·ªëi c√πng m√† c√≤n l√† qu√° tr√¨nh. ƒê·ª´ng qu√° kh·∫Øt khe v·ªõi b·∫£n th√¢n.',
    color: '#EF4444',
    emoji: 'üéØ',
    image: '/images/hero/Over achiever.png'
  }
};

// H·ªá th·ªëng t√≠nh ƒëi·ªÉm d·ª±a tr√™n c√¢u tr·∫£ l·ªùi
export function calculatePersonalityScore(answers: number[]): PersonalityScore {
  const score: PersonalityScore = {
    busyBee: 0,
    chiller: 0,
    balancer: 0,
    overAchiever: 0
  };

  // Logic t√≠nh ƒëi·ªÉm cho t·ª´ng c√¢u h·ªèi theo b·∫£ng m·ªõi
  answers.forEach((answer, questionIndex) => {
    switch (questionIndex) {
      case 0: // C√¢u 1
        if (answer === 0) score.balancer += 4;
        if (answer === 1) score.overAchiever += 4;
        if (answer === 2) score.chiller += 4;
        if (answer === 3) score.busyBee += 4;
        break;

      case 1: // C√¢u 2
        if (answer === 0) score.overAchiever += 4;
        if (answer === 1) score.chiller += 4;
        if (answer === 2) score.busyBee += 4;
        if (answer === 3) score.balancer += 4;
        break;

      case 2: // C√¢u 3
        if (answer === 0) score.busyBee += 2;
        if (answer === 1) score.balancer += 4;
        if (answer === 2) score.overAchiever += 4;
        if (answer === 3) score.chiller += 2;
        break;

      case 3: // C√¢u 4
        if (answer === 0) score.balancer += 2;
        if (answer === 1) score.overAchiever += 4;
        if (answer === 2) score.chiller += 4;
        if (answer === 3) score.busyBee += 2;
        break;

      case 4: // C√¢u 5
        if (answer === 0) score.balancer += 4;
        if (answer === 1) score.overAchiever += 1;
        if (answer === 2) score.chiller += 4;
        if (answer === 3) score.busyBee += 1;
        break;

      case 5: // C√¢u 6
        if (answer === 0) score.busyBee += 4;
        if (answer === 1) score.chiller += 1;
        if (answer === 2) score.balancer += 2;
        if (answer === 3) score.overAchiever += 4;
        break;

      case 6: // C√¢u 7
        if (answer === 0) score.overAchiever += 4;
        if (answer === 1) score.balancer += 2;
        if (answer === 2) score.busyBee += 2;
        if (answer === 3) score.chiller += 4;
        break;

      case 7: // C√¢u 8
        if (answer === 0) score.chiller += 4;
        if (answer === 1) score.overAchiever += 4;
        if (answer === 2) score.balancer += 2;
        if (answer === 3) score.busyBee += 2;
        break;

      case 8: // C√¢u 9
        if (answer === 0) score.balancer += 4;
        if (answer === 1) score.chiller += 4;
        if (answer === 2) score.overAchiever += 1;
        if (answer === 3) score.busyBee += 1;
        break;

      case 9: // C√¢u 10
        if (answer === 0) score.balancer += 4;
        if (answer === 1) score.chiller += 4;
        if (answer === 2) score.overAchiever += 1;
        if (answer === 3) score.busyBee += 1;
        break;
    }
  });

  return score;
}

// X√°c ƒë·ªãnh ki·ªÉu t√≠nh c√°ch d·ª±a tr√™n ƒëi·ªÉm s·ªë
export function determinePersonalityType(score: PersonalityScore): string {
  const scores = [
    { type: 'busyBee', score: score.busyBee },
    { type: 'chiller', score: score.chiller },
    { type: 'balancer', score: score.balancer },
    { type: 'overAchiever', score: score.overAchiever }
  ];

  // S·∫Øp x·∫øp theo ƒëi·ªÉm s·ªë gi·∫£m d·∫ßn
  scores.sort((a, b) => b.score - a.score);

  const maxScore = scores[0].score;

  // T√¨m t·∫•t c·∫£ c√°c t√≠nh c√°ch c√≥ ƒëi·ªÉm cao nh·∫•t
  const topScores = scores.filter(s => s.score === maxScore);

  // N·∫øu ch·ªâ c√≥ 1 t√≠nh c√°ch c√≥ ƒëi·ªÉm cao nh·∫•t
  if (topScores.length === 1) {
    return topScores[0].type;
  }

  // N·∫øu c√≥ nhi·ªÅu t√≠nh c√°ch c√≥ ƒëi·ªÉm b·∫±ng nhau, x·ª≠ l√Ω ƒë·∫∑c bi·ªát
  if (topScores.length === 2) {
    // Tr∆∞·ªùng h·ª£p 2 t√≠nh c√°ch b·∫±ng nhau - ∆∞u ti√™n theo th·ª© t·ª±
    const priorityOrder = ['balancer', 'chiller', 'busyBee', 'overAchiever'];
    for (const priority of priorityOrder) {
      if (topScores.some(s => s.type === priority)) {
        return priority;
      }
    }
  }

  if (topScores.length === 3) {
    // Tr∆∞·ªùng h·ª£p 3 t√≠nh c√°ch b·∫±ng nhau - ∆∞u ti√™n Balancer
    if (topScores.some(s => s.type === 'balancer')) {
      return 'balancer';
    }
    // N·∫øu kh√¥ng c√≥ Balancer, ∆∞u ti√™n Chiller
    if (topScores.some(s => s.type === 'chiller')) {
      return 'chiller';
    }
  }

  if (topScores.length === 4) {
    // Tr∆∞·ªùng h·ª£p t·∫•t c·∫£ b·∫±ng nhau - m·∫∑c ƒë·ªãnh Balancer
    return 'balancer';
  }

  // Fallback
  return 'balancer';
}

// H√†m ƒë·ªÉ l·∫•y th√¥ng tin chi ti·∫øt v·ªÅ k·∫øt qu·∫£
export function getDetailedResult(score: PersonalityScore): {
  primaryType: string;
  secondaryTypes: string[];
  isTie: boolean;
  scoreDetails: Array<{ type: string, score: number }>;
} {
  const scores = [
    { type: 'busyBee', score: score.busyBee },
    { type: 'chiller', score: score.chiller },
    { type: 'balancer', score: score.balancer },
    { type: 'overAchiever', score: score.overAchiever }
  ];

  // S·∫Øp x·∫øp theo ƒëi·ªÉm s·ªë gi·∫£m d·∫ßn
  scores.sort((a, b) => b.score - a.score);

  const maxScore = scores[0].score;
  const topScores = scores.filter(s => s.score === maxScore);

  const primaryType = determinePersonalityType(score);
  const secondaryTypes = topScores
    .filter(s => s.type !== primaryType)
    .map(s => s.type);

  return {
    primaryType,
    secondaryTypes,
    isTie: topScores.length > 1,
    scoreDetails: scores
  };
}
