import { PersonalityScore, personalityTypes } from "@/lib/personalityScoring";

/** D·ªØ li·ªáu ƒë·∫ßy ƒë·ªß v·ªÅ t√≠nh c√°ch */
export interface PersonalityProfile {
    userName: string;
    answers: number[];
    score: PersonalityScore;
    typeKey: keyof typeof personalityTypes;
    typeData: (typeof personalityTypes)[keyof typeof personalityTypes];
    timestamp: number;
}

/**
 * üîπ L∆∞u h·ªì s∆° t√≠nh c√°ch ng∆∞·ªùi d√πng v√†o localStorage
 */
export function savePersonalityProfile(profile: PersonalityProfile) {
    try {
        localStorage.setItem("personalityProfile", JSON.stringify(profile));
    } catch (error) {
        console.error("‚ùå L·ªói khi l∆∞u personalityProfile:", error);
    }
}

/**
 * üîπ L·∫•y h·ªì s∆° t√≠nh c√°ch ng∆∞·ªùi d√πng t·ª´ localStorage
 */
export function getPersonalityProfile(): PersonalityProfile | null {
    try {
        const raw = localStorage.getItem("personalityProfile");
        if (!raw) return null;

        const data = JSON.parse(raw) as PersonalityProfile;

        // Validate typeKey h·ª£p l·ªá
        if (!personalityTypes[data.typeKey]) {
            console.warn("‚ö†Ô∏è typeKey kh√¥ng h·ª£p l·ªá, reset profile");
            return null;
        }

        // ƒê·∫£m b·∫£o c√≥ ƒë·∫ßy ƒë·ªß typeData
        return {
            ...data,
            typeData: personalityTypes[data.typeKey],
        };
    } catch (error) {
        console.error("‚ùå L·ªói khi ƒë·ªçc personalityProfile:", error);
        return null;
    }
}

/**
 * üîπ X√≥a to√†n b·ªô d·ªØ li·ªáu ng∆∞·ªùi d√πng (d√πng khi l√†m l·∫°i b√†i test)
 */
export function clearPersonalityProfile() {
    try {
        localStorage.removeItem("personalityProfile");
    } catch (error) {
        console.error("‚ùå L·ªói khi x√≥a personalityProfile:", error);
    }
}

/**
 * üîπ C·∫≠p nh·∫≠t l·∫°i t√™n ng∆∞·ªùi d√πng trong profile hi·ªán t·∫°i
 */
export function updateUserName(name: string) {
    const profile = getPersonalityProfile();
    if (!profile) return;

    const updated: PersonalityProfile = {
        ...profile,
        userName: name,
    };

    savePersonalityProfile(updated);
}

/**
 * üîπ L∆∞u t·∫°m c√¢u tr·∫£ l·ªùi gi·ªØa ch·ª´ng
 */
export function saveAnswers(answers: number[]) {
    const profile = getPersonalityProfile();

    // T·ª± ƒë·ªông l·∫•y l·∫°i typeData n·∫øu c√≥ typeKey
    const fallbackTypeKey = profile?.typeKey ?? "balancer";
    const typeData = personalityTypes[fallbackTypeKey];

    const updated: PersonalityProfile = {
        userName: profile?.userName ?? "",
        typeKey: fallbackTypeKey,
        typeData,
        score: profile?.score ?? {
            busyBee: 0,
            chiller: 0,
            balancer: 0,
            overAchiever: 0,
        },
        answers,
        timestamp: Date.now(),
    };

    savePersonalityProfile(updated);
}

/**
 * üîπ Reset to√†n b·ªô (ƒë·ªÉ b·∫Øt ƒë·∫ßu l·∫°i t·ª´ ƒë·∫ßu)
 */
export function resetAllStorage() {
    clearPersonalityProfile();
}
